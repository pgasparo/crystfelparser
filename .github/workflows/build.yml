name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  linux:
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: crystfelparser
          environment-file: environment.yml
          python-version: 3.7
          auto-activate-base: false

      - name: Install dependencies
        run: |
          conda info
          pip install pytest pytest-cov codecov
      
      - name: Set environment variables
        run: echo "PYTHONPATH=${{ env.GITHUB_WORKSPACE }}/crystfelparser" >> $GITHUB_ENV

      - name: Download files
        run: python crystfelparser/download.py --tests

      - name: Run tests
        run: pytest --cov=crystfelparser --cov-config=.coveragerc --cov-report=xml tests/
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        run: codecov -t ${{ env.CODECOV_TOKEN }}
      
  macos:
    runs-on: "macos-latest"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: crystfelparser
          environment-file: environment_osx.yml
          python-version: 3.7
          auto-activate-base: false

      - name: Install dependencies
        run: |
          conda info
          pip install pytest pytest-cov codecov

      - name: Set environment variables
        run: echo "PYTHONPATH=${{ env.GITHUB_WORKSPACE }}/crystfelparser" >> $GITHUB_ENV
        
      - name: Download files
        run: python crystfelparser/download.py --tests

      - name: Run tests
        run: pytest
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        run: codecov -t ${{ env.CODECOV_TOKEN }}
